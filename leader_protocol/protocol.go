package leader_protocol

import (
	"crypto/sha256"
	"encoding/base64"
	"fmt"
	"pqgch/gake"
	"pqgch/util"
	"slices"
	"strconv"
)

// CryptoSession contains the cryptographic data used for computing the main session key.
type CryptoSession struct {
	tkRight     []byte               // 2-AKE temporary material.
	eskaRight   []byte               // 2-AKE temporary material.
	keyLeft     [gake.SsLen]byte     // Shared secret with the left neighbor.
	keyRight    [gake.SsLen]byte     // Shared secret with the right neighbor.
	xs          [][gake.SsLen]byte   // Xs - each Xi is the result of XOR-ing the left and right key of each protocol participant.
	commitments [][gake.SsLen]byte   // The commitment is a result of hashing the Xi and Ri together. They are then broadcasted by each participant.
	rs          [][gake.CoinLen]byte // Rs - each Ri is randomly generated by each participant.
}

func NewCryptoSession(config util.LeaderConfig) CryptoSession {
	return CryptoSession{
		xs:          make([][gake.SsLen]byte, len(config.LeaderNames)),
		commitments: make([][gake.SsLen]byte, len(config.LeaderNames)),
		rs:          make([][gake.CoinLen]byte, len(config.LeaderNames)),
	}
}

// Session contains selected transport, config and cryptographic session state.
type Session struct {
	receiveChan        chan util.Message
	sender             util.MessageSender
	config             util.LeaderConfig
	crypto             CryptoSession
	clusterSessionChan chan util.Message // Here we send the established main session key.
}

// Create a new Cluster Leader session. This is the session that is used for interacting between cluster leaders.
// It does not take the cluster members into account.
// The Transport defines how the messages produced by the protocol will be routed.
func NewSession(sender util.MessageSender, config util.LeaderConfig, clusterSessionChan, receiveChan chan util.Message) *Session {
	s := &Session{
		receiveChan:        receiveChan,
		sender:             sender,
		crypto:             NewCryptoSession(config),
		config:             config,
		clusterSessionChan: clusterSessionChan,
	}

	return s
}

// Initialize the session by sending the first message of the 2-AKE to the neighbor.
func (s *Session) Init() {
	if s.config.IsRightQKDPath() {
		rightKeyQKD := s.config.RightQKDKey()
		s.crypto.keyRight = rightKeyQKD
	}

	if s.config.IsLeftQKDPath() {
		leftKeyQKD := s.config.LeftQKDKey()
		s.crypto.keyLeft = leftKeyQKD
	}

	msg := s.checkLeftRightKeys()
	if !msg.IsEmpty() {
		s.sender.Send(msg)
	}

	if !s.config.IsRightQKDUrl() && !s.config.IsRightQKDPath() {
		var akeSendARight []byte
		akeSendARight, s.crypto.tkRight, s.crypto.eskaRight = gake.KexAkeInitA(s.config.RightPublicKey())

		msg := util.Message{
			SenderID:   s.config.ClusterConfig.MemberID,
			SenderName: s.config.ClusterConfig.Name(),
			Type:       util.LeadAkeOneMsg,
			ReceiverID: s.config.RightIndex(),
			Content:    base64.StdEncoding.EncodeToString(akeSendARight),
			ClusterID:  s.config.ClusterConfig.ClusterID,
		}

		go s.sender.Send(msg)
	}
}

func (s *Session) MessageHandler() {
	for msg := range s.receiveChan {
		s.handleMessage(msg)
	}
}

// Process the first message of 2-AKE, holding as a result keyLeft. The second message of 2-AKE is then sent.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) onAkeOne(recv util.Message) {
	akeSendA, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil {
		util.LogError("Invalid base64 content received")
		return
	}

	var akeSendB []byte
	akeSendB, s.crypto.keyLeft = gake.KexAkeSharedB(
		akeSendA,
		s.config.GetSecretKey(),
		s.config.LeftPublicKey())
	util.LogCrypto("Established 2-AKE shared key with left neighbor")

	msg := util.Message{
		SenderID:   s.config.ClusterConfig.MemberID,
		SenderName: s.config.ClusterConfig.Name(),
		Type:       util.LeadAkeTwoMsg,
		ReceiverID: recv.ClusterID,
		Content:    base64.StdEncoding.EncodeToString(akeSendB),
		ClusterID:  s.config.ClusterConfig.ClusterID,
	}
	s.sender.Send(msg)

	msg = s.checkLeftRightKeys()
	if !msg.IsEmpty() {
		s.sender.Send(msg)
	}
}

// Process the second message of 2-AKE, holding as a result keyRight.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) onAkeTwo(recv util.Message) {
	akeSendB, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil {
		util.LogError("Invalid base64 content received")
		return
	}

	s.crypto.keyRight = gake.KexAkeSharedA(akeSendB, s.crypto.tkRight, s.crypto.eskaRight, s.config.GetSecretKey())

	util.LogCrypto("Established 2-AKE shared key with right neighbor")

	msg := s.checkLeftRightKeys()
	if !msg.IsEmpty() {
		s.sender.Send(msg)
	}
}

// Handle the message containing Xi, Ri and Commitment. This message is broadcasted by the other protocol participants to everyone else.
// If we receive such a message, we need to try finalizing the protocol, as we could have received the last message of this kind we need.
func (s *Session) onXiRiCommitment(recv util.Message) {
	decoded, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil {
		util.LogError("Invalid base64 content received")
		return
	}

	s.crypto.xs[recv.ClusterID] = [gake.SsLen]byte(decoded[:gake.SsLen])
	s.crypto.commitments[recv.ClusterID] = [gake.SsLen]byte(decoded[gake.SsLen : 2*gake.SsLen])
	s.crypto.rs[recv.ClusterID] = [gake.CoinLen]byte(decoded[2*gake.SsLen:])

	s.tryFinalizeProtocol()
}

func (s *Session) onLeftKey(recv util.Message) {
	decoded, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil || len(decoded) < gake.SsLen {
		util.LogError("Invalid base64 content received")
		return
	}
	copy(s.crypto.keyLeft[:], decoded)

	msg := s.checkLeftRightKeys()
	if !msg.IsEmpty() {
		s.sender.Send(msg)
	}
}

func (s *Session) onRightKey(recv util.Message) {
	decoded, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil || len(decoded) < gake.SsLen {
		util.LogError("Invalid base64 content received")
		return
	}

	copy(s.crypto.keyRight[:], decoded)

	msg := s.checkLeftRightKeys()
	if !msg.IsEmpty() {
		s.sender.Send(msg)
	}
}

func (s *Session) onQKDID(recv util.Message) {
	key := util.RequestKeyByID(s.config.LeftQKDUrl(), recv.Content)
	s.onLeftKey(util.Message{
		Content: key,
	})
}

// Handle the received message according to its type.
func (s *Session) handleMessage(recv util.Message) {
	switch recv.Type {
	case util.LeadAkeOneMsg:
		s.onAkeOne(recv)
	case util.LeadAkeTwoMsg:
		s.onAkeTwo(recv)
	case util.LeaderXiRiCommitmentMsg:
		s.onXiRiCommitment(recv)
	case util.QKDLeftKeyMsg:
		s.onLeftKey(recv)
	case util.QKDRightKeyMsg:
		s.onRightKey(recv)
	case util.QKDIDLeaderMsg:
		s.onQKDID(recv)
	default:
		util.LogError("Unknown message type encountered")
	}
}

// Check whether we have both keyLeft and keyRight available. If so, compute the Xi, Ri and Commitment message and return it.
// Also, try finalizing the protocol now, since the Xi we computed could have been the last one we needed.
func (s *Session) checkLeftRightKeys() util.Message {
	if s.crypto.keyRight != [gake.SsLen]byte{} && s.crypto.keyLeft != [gake.SsLen]byte{} {
		util.LogCrypto("Established 2-AKE shared keys with both neighbors")
		msg := s.getXiRiCommitmentMsg()
		s.tryFinalizeProtocol()
		return msg
	}

	return util.Message{}
}

// Computation of the Xi, Ri and Commitment message.
// We XOR together our keyLeft and keyRight.
// Generate a random Ri.
// Compute the commitment as a hash of Xi and Ri.
// Save the values for our use and also return a message containing them, so we can send it to other protocol participants.
func (s *Session) getXiRiCommitmentMsg() util.Message {
	xi := gake.XorKeys(s.crypto.keyRight, s.crypto.keyLeft)
	ri := gake.GetRi()
	x := append(xi[:], ri[:]...)
	commitment := sha256.Sum256(x)

	s.crypto.xs[s.config.ClusterConfig.ClusterID] = xi
	s.crypto.commitments[s.config.ClusterConfig.ClusterID] = commitment
	s.crypto.rs[s.config.ClusterConfig.ClusterID] = ri

	content := append(append(xi[:], commitment[:]...), ri[:]...)
	msg := util.Message{
		SenderID:   s.config.ClusterConfig.MemberID,
		SenderName: s.config.ClusterConfig.Name(),
		Type:       util.LeaderXiRiCommitmentMsg,
		Content:    base64.StdEncoding.EncodeToString(content),
		ClusterID:  s.config.ClusterConfig.ClusterID,
	}

	return msg
}

// First, we check whether we have received all of the Xs.
// Then, we check whether XOR-ing the Xs together gives use the zero byte array.
// Then, we check the commitments by recalculating them.
// Then, we construct the party identifiers array.
// Finally we compute the shared secret key and session ID. We save it for later use - broadcasting it to the cluster members.
func (s *Session) tryFinalizeProtocol() {
	if slices.Contains(s.crypto.xs, [gake.SsLen]byte{}) {
		return
	}
	util.LogCrypto("Received all Xs")

	for i, x := range s.crypto.xs {
		util.LogCrypto(fmt.Sprintf("X%d: %02x", i, x[:4]))
	}

	ok := util.CheckXs(s.crypto.xs, len(s.config.LeaderNames))
	if !ok {
		util.ExitWithMsg("Failed XS check")
	}
	util.LogCrypto("Xs check: success")

	ok = checkCommitments(len(s.config.LeaderNames), s.crypto.xs, s.crypto.rs, s.crypto.commitments)
	if !ok {
		util.ExitWithMsg("Failed Commitments check")
	}
	util.LogCrypto("Commitments check: success")

	PIDs := make([][gake.PidLen]byte, len(s.config.LeaderNames))
	for i := range len(s.config.LeaderNames) {
		var byteArr [gake.PidLen]byte
		copy(byteArr[:], []byte(strconv.Itoa(i)))
		PIDs[i] = byteArr
	}

	otherLeftKeys := util.ComputeAllLeftKeys(len(s.config.LeaderNames), s.config.ClusterConfig.ClusterID, s.crypto.keyLeft, s.crypto.xs, PIDs)
	sharedSecret := computeSharedSecret(otherLeftKeys, PIDs, len(s.config.LeaderNames))

	util.LogCrypto(fmt.Sprintf("Main Session Key established: %02x...", sharedSecret[:4]))

	s.clusterSessionChan <- util.Message{
		Type:    util.MainSessionKeyMsg,
		Content: base64.StdEncoding.EncodeToString(sharedSecret[:]),
	}
}

// Compute the shared secret from the left keys of the protocol participants.
// Note that the session key itself is computed from the first numParties - 1 left keys.
// NOTE: we do not compute the Session ID (sid), since we do not use it.
func computeSharedSecret(otherLeftKeys [][gake.SsLen]byte, pids [][gake.PidLen]byte, numParties int) [gake.SsLen]byte {
	// For the session key, we use the left keys of protocol participants 0..n-2, so we skip one.
	sessionKeyTemp := make([]byte, gake.SsLen*(numParties-1)+gake.PidLen*numParties)
	for i := range numParties - 1 {
		copy(sessionKeyTemp[i*gake.SsLen:(i+1)*gake.SsLen], otherLeftKeys[i][:])
	}
	for i := range numParties - 1 {
		copy(sessionKeyTemp[(numParties-1)*gake.SsLen+i*gake.PidLen:(numParties-1)*gake.SsLen+(i+1)*gake.PidLen], pids[i][:])
	}

	sessionKey := sha256.Sum256(sessionKeyTemp)

	return sessionKey
}

// We have received the commitments from other protocol participants. We also have received Rs and Xs from them.
// Now, check whether by recalculating the commitments from the Rs and Xs we get the same values.
func checkCommitments(
	numParties int,
	xs [][gake.SsLen]byte,
	rs [][gake.CoinLen]byte,
	commitments [][gake.SsLen]byte) bool {
	for i := range numParties {
		x := append(xs[i][:], rs[i][:]...)
		commitment := sha256.Sum256(x)

		for j := range gake.SsLen {
			if commitment[j] != commitments[i][j] {
				return false
			}
		}
	}

	return true
}
