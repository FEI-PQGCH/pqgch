package leader_protocol

import (
	"bytes"
	"crypto/sha256"
	"encoding/base64"
	"fmt"
	"os"
	"pqgch/gake"
	"pqgch/shared"
	"slices"
)

// CryptoSession contains the cryptographic data used for computing the main session key.
type CryptoSession struct {
	TkRight      []byte               // 2-AKE temporary material.
	EskaRight    []byte               // 2-AKE temporary material.
	KeyLeft      [gake.SsLen]byte     // Shared secret with the left neighbor.
	KeyRight     [gake.SsLen]byte     // Shared secret with the right neighbor.
	Xs           [][gake.SsLen]byte   // Xs - each Xi is the result of XOR-ing the left and right key of each protocol participant.
	Commitments  [][32]byte           // The commitment is a result of hashing the Xi and Ri together. They are then broadcasted by each participant.
	Rs           [][gake.CoinLen]byte // Rs - each Ri is randomly generated by each participant.
	SharedSecret [gake.SsLen]byte     // The resulting main session key used for inter-cluster communication.
}

func NewCryptoSession(config shared.ConfigAccessor) CryptoSession {
	return CryptoSession{
		Xs:          make([][gake.SsLen]byte, len(config.GetNamesOrAddrs())),
		Commitments: make([][32]byte, len(config.GetNamesOrAddrs())),
		Rs:          make([][gake.CoinLen]byte, len(config.GetNamesOrAddrs())),
	}
}

// Session contains selected transport, config and cryptographic session state.
type Session struct {
	transport shared.Transport
	config    shared.ConfigAccessor
	session   CryptoSession
}

// Create a new Cluster Leader session. The Transport defines how the messages produced by the protocol will be routed.
func NewSession(transport shared.Transport, config shared.ConfigAccessor) *Session {
	s := &Session{
		transport: transport,
		session:   NewCryptoSession(config),
		config:    config,
	}

	transport.SetMessageHandler(s.handleMessage)

	return s
}

// Initialize the session by sending the first message of the 2-AKE to the neighbor.
func (s *Session) Init() {
	var rightIndex = (s.config.GetIndex() + 1) % len(s.config.GetNamesOrAddrs())
	var akeSendARight []byte
	akeSendARight, s.session.TkRight, s.session.EskaRight = gake.KexAkeInitA(s.config.GetDecodedPublicKey(rightIndex))

	msg := shared.Message{
		ID:         shared.GenerateUniqueID(),
		SenderID:   s.config.GetIndex(),
		SenderName: s.config.GetName(),
		Type:       s.config.GetMessageType(shared.AkeAMsg),
		ReceiverID: rightIndex,
		Content:    base64.StdEncoding.EncodeToString(akeSendARight),
	}

	s.transport.Send(msg)
}

func (s *Session) GetKeyRef() *[32]byte {
	return &s.session.SharedSecret
}

// Process the second message of 2-AKE, holding as a result either keyLeft or keyRight. The second message of 2-AKE is then sent.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) akeA(akeBMsg shared.Message) {
	akeSendA, _ := base64.StdEncoding.DecodeString(akeBMsg.Content)

	var akeSendB []byte
	akeSendB, s.session.KeyLeft = gake.KexAkeSharedB(
		akeSendA,
		s.config.GetDecodedSecretKey(),
		s.config.GetDecodedPublicKey(akeBMsg.SenderID))

	fmt.Println("[CRYPTO] Established shared key with left neighbor")

	akeBMsg = shared.Message{
		ID:         shared.GenerateUniqueID(),
		SenderID:   s.config.GetIndex(),
		SenderName: s.config.GetName(),
		Type:       s.config.GetMessageType(shared.AkeBMsg),
		ReceiverID: akeBMsg.SenderID,
		Content:    base64.StdEncoding.EncodeToString(akeSendB),
	}

	xi := checkLeftRightKeys(&s.session, s.config)

	s.transport.Send(akeBMsg)
	if !xi.IsEmpty() {
		s.transport.Send(xi)
	}
}

// Process the second message of 2-AKE, holding as a result either keyLeft or keyRight.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) akeB(msg shared.Message) {
	akeSendB, _ := base64.StdEncoding.DecodeString(msg.Content)
	s.session.KeyRight = gake.KexAkeSharedA(akeSendB, s.session.TkRight, s.session.EskaRight, s.config.GetDecodedSecretKey())
	xi := checkLeftRightKeys(&s.session, s.config)

	if !xi.IsEmpty() {
		s.transport.Send(xi)
	}
}

// Handle the message containing Xi, Ri and Commitment. This message is broadcasted by the other protocol participants to everyone else.
// If we receive such a message, we need to try finalizing the protocol, as we could have received the last message of this kind we need.
func (s *Session) xiRiCommitment(msg shared.Message) {
	if msg.SenderID == s.config.GetIndex() {
		return
	}

	decoded, _ := base64.StdEncoding.DecodeString(msg.Content)

	xi := decoded[:gake.SsLen]
	commitment := decoded[gake.SsLen : gake.SsLen+gake.SsLen]
	ri := decoded[gake.SsLen+gake.SsLen:]

	var xiArr [gake.SsLen]byte
	copy(xiArr[:], xi)
	var commitmentArr [32]byte
	copy(commitmentArr[:], commitment)
	var coinArr [gake.CoinLen]byte
	copy(coinArr[:], ri)

	s.session.Commitments[msg.SenderID] = commitmentArr
	s.session.Rs[msg.SenderID] = coinArr
	s.session.Xs[msg.SenderID] = xiArr
	tryFinalizeProtocol(&s.session, s.config)
}

// Handle the received message according to its type.
func (s *Session) handleMessage(msg shared.Message) {
	switch msg.Type {
	case shared.LeaderAkeAMsg:
		s.akeA(msg)
	case shared.LeaderAkeBMsg:
		s.akeB(msg)
	case shared.LeaderXiMsg:
		s.xiRiCommitment(msg)
	default:
		fmt.Printf("[ERROR] Unknown message type encountered\n")
	}
}

// Check whether we have both keyLeft and keyRight available. If so, compute the Xi, Ri and Commitment message and return it.
// Also, try finalizing the protocol now, since the Xi we computed could have been the last one we needed.
func checkLeftRightKeys(session *CryptoSession, config shared.ConfigAccessor) shared.Message {
	if session.KeyRight != [gake.SsLen]byte{} && session.KeyLeft != [gake.SsLen]byte{} {
		fmt.Println("[CRYPTO] Established shared keys with both neighbors")
		xcmMsg := getXiRiCommitmentMsg(session, config)
		tryFinalizeProtocol(session, config)
		return xcmMsg
	}

	return shared.Message{}
}

// Computation of the Xi, Ri and Commitment message.
// We XOR together our keyLeft and keyRight.
// Generate a random Ri.
// Compute the commitment as a hash of Xi and Ri.
// Save the values for our use and also return a message containing them, so we can send it to other protocol participants.
func getXiRiCommitmentMsg(session *CryptoSession, config shared.ConfigAccessor) shared.Message {
	xi := gake.XorKeys(session.KeyRight, session.KeyLeft)
	ri := gake.GetRi()
	x := append(xi[:], ri[:]...)
	commitment := sha256.Sum256(x)

	session.Xs[config.GetIndex()] = xi
	session.Commitments[config.GetIndex()] = commitment
	session.Rs[config.GetIndex()] = ri

	var buffer bytes.Buffer
	buffer.Grow(gake.SsLen + gake.SsLen + gake.CoinLen)
	buffer.Write(xi[:])
	buffer.Write(commitment[:])
	buffer.Write(ri[:])

	msg := shared.Message{
		ID:         shared.GenerateUniqueID(),
		SenderID:   config.GetIndex(),
		SenderName: config.GetName(),
		Type:       config.GetMessageType(shared.XiMsg),
		Content:    base64.StdEncoding.EncodeToString(buffer.Bytes()),
	}

	return msg
}

// First, we check whether we have received all of the Xs.
// Then, we check whether XOR-ing the Xs together gives use the zero byte array.
// Then, we check the commitments by recalculating them.
// Then, we construct the party identifiers array.
// Finally we compute the shared secret key and session ID. We save it for later use - broadcasting it to the cluster members.
func tryFinalizeProtocol(session *CryptoSession, config shared.ConfigAccessor) {
	if slices.Contains(session.Xs, [gake.SsLen]byte{}) {
		return
	}

	fmt.Println("[CRYPTO] Received all Xs")

	for i := range session.Xs {
		fmt.Printf("[CRYPTO] X%d: %02x\n", i, (session.Xs)[i][:4])
	}

	ok := shared.CheckXs(session.Xs, len(config.GetNamesOrAddrs()))
	if ok {
		fmt.Println("[CRYPTO] Xs check: success")
	} else {
		fmt.Println("[CRYPTO] Xs check: fail")
		os.Exit(1)
	}

	ok = checkCommitments(len(config.GetNamesOrAddrs()), session.Xs, session.Rs, session.Commitments)
	if ok {
		fmt.Println("[CRYPTO] Commitments check: success")
	} else {
		fmt.Println("[CRYPTO] Commitments check: fail")
		os.Exit(1)
	}

	pids := make([][gake.PidLen]byte, len(config.GetNamesOrAddrs()))
	stringPids := config.GetNamesOrAddrs()
	for i := range config.GetNamesOrAddrs() {
		var byteArr [gake.PidLen]byte
		copy(byteArr[:], []byte(stringPids[i]))
		pids[i] = byteArr
	}

	otherLeftKeys := shared.ComputeAllLeftKeys(len(config.GetNamesOrAddrs()), config.GetIndex(), session.KeyLeft, session.Xs, pids)
	sharedSecret, sessionID := computeSessionKeyAndID(otherLeftKeys, pids, len(config.GetNamesOrAddrs()))

	fmt.Printf("[CRYPTO] SharedSecret%d: %02x...\n", config.GetIndex(), sharedSecret[:4])
	fmt.Printf("[CRYPTO] SessionId%d: %02x...\n", config.GetIndex(), sessionID[:4])

	session.SharedSecret = sharedSecret
}

// Compute the session key and ID from the left keys of the protocol participants.
// Note that the session key itself is computed from the first numParties - 1 left keys.
// Only the session ID is computed from all of the left keys.
func computeSessionKeyAndID(otherLeftKeys [][32]byte, pids [][20]byte, numParties int) ([32]byte, [32]byte) {
	// For the session key, we use the left keys of protocol participants 0..n-2, so we skip one.
	sessionKeyTemp := make([]byte, 32*(numParties-1)+20*numParties)
	for i := range numParties - 1 {
		copy(sessionKeyTemp[i*32:(i+1)*32], otherLeftKeys[i][:])
	}
	for i := range numParties - 1 {
		copy(sessionKeyTemp[(numParties-1)*32+i*20:(numParties-1)*32+(i+1)*20], pids[i][:])
	}

	// For the session ID, we use the left keys of all protocol participants
	sessionIDTemp := make([]byte, 32*numParties+20*numParties)
	for i := range numParties {
		copy(sessionIDTemp[i*32:(i+1)*32], otherLeftKeys[i][:])
	}
	for i := range numParties {
		copy(sessionIDTemp[len(otherLeftKeys)*32+i*20:len(otherLeftKeys)*32+(i+1)*20], pids[i][:])
	}

	sessionKey := sha256.Sum256(sessionKeyTemp)
	sessionID := sha256.Sum256(sessionIDTemp)

	return sessionKey, sessionID
}

// We have received the commitments from other protocol participants. We also have received Rs and Xs from them.
// Now, check whether by recalculating the commitments from the Rs and Xs we get the same values.
func checkCommitments(
	numParties int,
	xs [][32]byte,
	rs [][44]byte,
	commitments [][32]byte) bool {
	for i := range numParties {
		x := append(xs[i][:], rs[i][:]...)
		commitment := sha256.Sum256(x)

		for j := range 32 {
			if commitment[j] != commitments[i][j] {
				return false
			}
		}
	}

	return true
}
