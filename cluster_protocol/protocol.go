package cluster_protocol

import (
	"encoding/base64"
	"fmt"
	"pqgch/gake"
	"pqgch/util"
	"slices"
)

// CryptoSession contains the cryptographic data used for computing the main session key.
type CryptoSession struct {
	tkRight           []byte               // 2-AKE temporary material.
	eskaRight         []byte               // 2-AKE temporary material.
	keyLeft           [gake.SsLen]byte     // Shared secret with the left neighbor.
	keyRight          [gake.SsLen]byte     // Shared secret with the right neighbor.
	xs                [][gake.SsLen]byte   // Xs - each Xi is the result of XOR-ing the left and right key of each protocol participant.
	commitments       []gake.Commitment    // The commitment is a result of hashing the Xi and Ri together. They are then broadcasted by each participant.
	rs                [][gake.CoinLen]byte // Rs - each Ri is randomly generated by each participant.
	clusterSessionKey [2 * gake.SsLen]byte // The resulting cluster session key used for intra-cluster communication.
}

func NewCryptoSession(config util.ClusterConfig) CryptoSession {
	return CryptoSession{
		xs:          make([][gake.SsLen]byte, len(config.Names)),
		commitments: make([]gake.Commitment, len(config.Names)),
		rs:          make([][gake.CoinLen]byte, len(config.Names)),
	}
}

// Session contains the selected transport for distributing the messages, config and cryptographic session state.
// We also store the reference to the keyCiphertext, which should contain the main session key. We store it so we
// are able to decrypt it even in the case of receiving keyCiphertext before we establish the cluster session key.
// mainSessionKey contains the key used for encrypted text communication.
type Session struct {
	receiveChan             chan util.Message
	sender                  util.MessageSender
	config                  util.ClusterConfig
	crypto                  CryptoSession
	keyCiphertext           []byte
	mainSessionKey          [gake.SsLen]byte
	transportMainSessionKey func() // Callback function to transport the main session key between cluster leader and members.
	// If the session user is a cluster member, the callback tries to decrypt the main session key ciphertext.
	// This ciphertext is to be received from the cluster leader.
	// If the session user is a cluster leader, the cluster leader uses the cluster session key
	// to encrypt and distribute the main session key. The main session key is created by the leader_protocol.
}

// Create a new Cluster Member session. The Transport defines how the messages produced by the protocol will be routed.
func NewSession(
	sender util.MessageSender,
	config util.ClusterConfig,
	receiveChan chan util.Message) *Session {
	s := &Session{
		receiveChan: receiveChan,
		sender:      sender,
		crypto:      NewCryptoSession(config),
		config:      config,
	}

	s.transportMainSessionKey = func() {
		if s.keyCiphertext == nil {
			util.LogCrypto("No Encrypted Main Session Key, skipping")
			return
		}
		s.decryptAndStoreKey(s.keyCiphertext)
	}

	return s
}

// Create a new Cluster Leader session. This is the session used for interacting with cluster members.
// The Transport defines how the messages produced by the protocol will be routed.
// It is assumed to already be established by the time we establish the cluster session key.
func NewLeaderSession(
	sender util.MessageSender,
	config util.ClusterConfig,
	receiveChan chan util.Message) *Session {
	s := &Session{
		receiveChan: receiveChan,
		sender:      sender,
		crypto:      NewCryptoSession(config),
		config:      config,
	}

	s.transportMainSessionKey = func() {
		if s.mainSessionKey == [gake.SsLen]byte{} {
			util.LogCrypto("No Main Session Key yet, skipping")
			return
		}
		if s.crypto.clusterSessionKey == [2 * gake.SsLen]byte{} {
			util.LogCrypto("No Cluster Session Key yet, skipping")
			return
		}
		util.LogCrypto("Broadcasting Main Session Key to cluster")
		keyMsg, err := util.EncryptAndHMAC(s.mainSessionKey, config.Name(), s.crypto.clusterSessionKey)
		if err != nil {
			util.ExitWithMsg(fmt.Sprintf("Failed to encrypt and HMAC the Main Session Key. %v", err))
		}

		s.sender.Send(keyMsg)
	}

	return s
}

// Initialize the session by sending the first message of the 2-AKE to the neighbor.
func (s *Session) Init() {
	if s.config.IsClusterQKDPath() {
		key, err := s.config.ClusterQKDKeyFromFile()
		if err != nil {
			util.ExitWithMsg(fmt.Sprintf("failed loading cluster QKD key: %v", err))
		}
		s.crypto.clusterSessionKey = key

		util.LogCrypto(fmt.Sprintf("Cluster Session Key established: %02x...", s.crypto.clusterSessionKey[:4]))
		s.transportMainSessionKey()
		return
	}

	if s.config.IsClusterQKDUrl() {
		return
	}

	akeSendARight, tk, eska := gake.KexAkeInitA(s.config.GetPublicKeys()[s.config.RightIndex()])
	s.crypto.tkRight, s.crypto.eskaRight = tk, eska

	msg := util.Message{
		ID:         util.UniqueID(),
		SenderID:   s.config.Index,
		SenderName: s.config.Name(),
		Type:       util.AkeOneMsg,
		ReceiverID: s.config.RightIndex(),
		Content:    base64.StdEncoding.EncodeToString(akeSendARight),
	}
	go s.sender.Send(msg)
}

func (s *Session) MessageHandler() {
	for msg := range s.receiveChan {
		s.handleMessage(msg)
	}
}

// Process the first message of 2-AKE, holding as a result keyLeft. The second message of 2-AKE is then sent.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) onAkeOne(msg util.Message) {
	akeSendA, err := base64.StdEncoding.DecodeString(msg.Content)
	if err != nil {
		util.LogError("Invalid base64 content received")
		return
	}

	var akeSendB []byte
	akeSendB, s.crypto.keyLeft = gake.KexAkeSharedB(
		akeSendA,
		s.config.GetSecretKey(),
		s.config.GetPublicKeys()[msg.SenderID])

	util.LogCrypto("Established 2-AKE shared key with left neighbor")

	msg = util.Message{
		ID:         util.UniqueID(),
		SenderID:   s.config.Index,
		SenderName: s.config.Name(),
		Type:       util.AkeTwoMsg,
		ReceiverID: msg.SenderID,
		Content:    base64.StdEncoding.EncodeToString(akeSendB),
	}
	s.sender.Send(msg)

	msg = s.checkLeftRightKeys()
	if !msg.IsEmpty() {
		s.sender.Send(msg)
	}
}

// Process the second message of 2-AKE, holding as a result keyRight.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) onAkeTwo(recv util.Message) {
	akeSendB, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil {
		util.LogError("Invalid base64 content received")
		return
	}
	s.crypto.keyRight = gake.KexAkeSharedA(akeSendB, s.crypto.tkRight, s.crypto.eskaRight, s.config.GetSecretKey())

	util.LogCrypto("Established 2-AKE shared key with right neighbor")

	msg := s.checkLeftRightKeys()
	if !msg.IsEmpty() {
		s.sender.Send(msg)
	}
}

// Handle the message containing Xi, Ri and Commitment. This message is broadcasted by the other protocol participants to everyone else.
// If we receive such a message, we need to try finalizing the protocol, as we could have received the last message of this kind we need.
func (s *Session) onXiRiCommitment(recv util.Message) {
	decoded, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil {
		util.LogError("Invalid base64 content received")
		return
	}
	var commitment gake.Commitment
	commitment.CipherTextDem = [gake.CtDemLen]byte(decoded[gake.SsLen+gake.CtKemLen : gake.SsLen+gake.CtKemLen+gake.CtDemLen])
	commitment.CipherTextKem = [gake.CtKemLen]byte(decoded[gake.SsLen : gake.SsLen+gake.CtKemLen])
	commitment.Tag = [gake.TagLen]byte(decoded[gake.SsLen+gake.CtKemLen+gake.CtDemLen : gake.SsLen+gake.CtKemLen+gake.CtDemLen+gake.TagLen])

	s.crypto.commitments[recv.SenderID] = commitment
	s.crypto.rs[recv.SenderID] = [gake.CoinLen]byte(decoded[gake.SsLen+gake.CtKemLen+gake.CtDemLen+gake.TagLen:])
	s.crypto.xs[recv.SenderID] = [gake.SsLen]byte(decoded[:gake.SsLen])
	s.tryFinalizeProtocol()
}

// Handle the key cipher text message, which should contain the main session key.
// If we have the cluster session key available, we decrypt the ciphertext and store the main session key.
// If it is not available yet, we store the key ciphertext and we will decrypt it in the OnSharedKey handler.
func (s *Session) onKey(recv util.Message) {
	decoded, err := base64.StdEncoding.DecodeString(recv.Content)
	if err != nil {
		util.LogError(fmt.Sprintf("Failed to decode key message: %v", err))
		return
	}
	if s.crypto.clusterSessionKey == [2 * gake.SsLen]byte{} {
		util.LogCrypto("No Cluster Session Key yet. Storing Encrypted Main Session Key message.")
		s.keyCiphertext = decoded
		return
	}
	s.decryptAndStoreKey(decoded)
}

// Handle a onText message - we decrypt it using the main session key and print.
func (s *Session) onText(recv util.Message) {
	if s.mainSessionKey == [gake.SsLen]byte{} {
		util.LogCrypto("No Main Session Key yet. Skipping message.")
		return
	}
	plainText, err := util.DecryptAesGcm(recv.Content, s.mainSessionKey[:])
	if err != nil {
		util.LogError(fmt.Sprint("Failed decrypting message:", err))
		return
	}
	text := fmt.Sprintf("%s: %s", recv.SenderName, plainText)
	util.PrintLineColored(text, util.ColorGreen)
}

func (s *Session) onMainSessionKey(recv util.Message) {
	decoded, _ := base64.StdEncoding.DecodeString(recv.Content)
	copy(s.mainSessionKey[:], decoded)
	s.transportMainSessionKey()
}

func (s *Session) onQKDClusterKey(msg util.Message) {
	decoded, _ := base64.StdEncoding.DecodeString(msg.Content)
	util.LogCrypto(fmt.Sprintf("Established Cluster Session Key via QKD: %02xâ€¦", decoded[:4]))
	copy(s.crypto.clusterSessionKey[:], decoded)
	s.transportMainSessionKey()
}

func (s *Session) onQKDID(msg util.Message) {
	go func() {
		keyMsg := util.RequestKeyByID(s.config.ClusterQKDUrl(), msg.Content, false)
		s.receiveChan <- keyMsg
	}()
}

// Handle the received message according to its type.
func (s *Session) handleMessage(recv util.Message) {
	switch recv.Type {
	case util.AkeOneMsg:
		s.onAkeOne(recv)
	case util.AkeTwoMsg:
		s.onAkeTwo(recv)
	case util.XiRiCommitmentMsg:
		s.onXiRiCommitment(recv)
	case util.KeyMsg:
		s.onKey(recv)
	case util.MainSessionKeyMsg:
		s.onMainSessionKey(recv)
	case util.QKDClusterKeyMsg:
		s.onQKDClusterKey(recv)
	case util.QKDIDMsg:
		s.onQKDID(recv)
	default:
		s.onText(recv)
	}
}

// Encrypt and send the text message. To be used by client code.
func (s *Session) SendText(text string) {
	if s.mainSessionKey == [gake.SsLen]byte{} {
		util.LogCrypto("No Main Session Key yet. Not sending message.")
		return
	}
	cipherText, err := util.EncryptAesGcm(text, s.mainSessionKey[:])
	if err != nil {
		util.LogError(fmt.Sprintf("Send text encryption failed: %v", err))
		return
	}
	msg := util.Message{
		ID:         util.UniqueID(),
		SenderID:   s.config.Index,
		SenderName: s.config.Name(),
		Content:    cipherText,
		Type:       util.TextMsg,
	}
	go s.sender.Send(msg)
}

// Check whether we have both keyLeft and keyRight available. If so, compute the Xi, Ri and Commitment message and return it.
// Also, try finalizing the protocol now, since the Xi we computed could have been the last one we needed.
func (s *Session) checkLeftRightKeys() util.Message {
	if s.crypto.keyRight != [gake.SsLen]byte{} && s.crypto.keyLeft != [gake.SsLen]byte{} {
		util.LogCrypto("Established 2-AKE shared keys with both neighbors")
		msg := getXiCommitmentCoinMsg(&s.crypto, s.config)
		s.tryFinalizeProtocol()
		return msg
	}

	return util.Message{}
}

// Computation of the Xi, Ri and Commitment message.
// We XOR together our keyLeft and keyRight.
// Generate a random Ri.
// Compute the commitment as a public key encryption of Xi, Ri and i (index of current party).
// Save the values for our use and also return a message containing them, so we can send it to other protocol participants.
func getXiCommitmentCoinMsg(session *CryptoSession, config util.ClusterConfig) util.Message {
	xi := gake.XorKeys(session.keyRight, session.keyLeft)
	ri := gake.GetRi()
	commitment := computeCommitment(
		config.Index,
		config.GetPublicKeys()[config.Index],
		xi,
		ri)

	session.xs[config.Index] = xi
	session.commitments[config.Index] = commitment
	session.rs[config.Index] = ri

	content := append(append(append(append(
		xi[:],
		commitment.CipherTextKem[:]...),
		commitment.CipherTextDem[:]...),
		commitment.Tag[:]...),
		ri[:]...)

	msg := util.Message{
		ID:         util.UniqueID(),
		SenderID:   config.Index,
		SenderName: config.Name(),
		Type:       util.XiRiCommitmentMsg,
		Content:    base64.StdEncoding.EncodeToString(content),
	}

	return msg
}

// Compute the commitment as Kyber Public Key Encryption of Xi, Ri and i.
func computeCommitment(i int, publicKey [gake.PkLen]byte, xi [gake.SsLen]byte, ri [gake.CoinLen]byte) gake.Commitment {
	var xiBuf [gake.SsLen + 4]byte
	var iBuf [4]byte

	iBuf[0] = byte(i >> 24)
	iBuf[1] = byte(i >> 16)
	iBuf[2] = byte(i >> 8)
	iBuf[3] = byte(i)

	copy(xiBuf[:], xi[:])
	copy(xiBuf[gake.SsLen:], iBuf[:])

	commitment := gake.Commit_pke(publicKey, xiBuf, ri)

	return commitment
}

// First, we check whether we have received all of the Xs.
// Then, we check whether XOR-ing the Xs together gives use the zero byte array.
// Then, we check the commitments by recalculating them.
// Then, we construct the party identifiers (PIDs) array.
// Finally we compute the shared secret key and session ID. We save it for later use - distribution of the main session key.
// The cluster leader uses this session key to encrypt the main session key, cluster members use it for decrypting said key.
func (s *Session) tryFinalizeProtocol() {
	if slices.Contains(s.crypto.xs, [gake.SsLen]byte{}) {
		return
	}
	util.LogCrypto("Received all Xs")

	for i, x := range s.crypto.xs {
		util.LogCrypto(fmt.Sprintf("X%d: %02x", i, x[:4]))
	}

	ok := util.CheckXs(s.crypto.xs, len(s.config.Names))
	if !ok {
		util.ExitWithMsg("Failed XS check")
	}
	util.LogCrypto("Xs check: success")

	ok = checkCommitments(s.crypto.xs, s.config.GetPublicKeys(), s.crypto.rs, s.crypto.commitments)
	if !ok {
		util.ExitWithMsg("Failed Commitments check")
	}
	util.LogCrypto("Commitments check: success")

	PIDs := make([][gake.PidLen]byte, len(s.config.Names))
	for i, n := range s.config.Names {
		var byteArr [gake.PidLen]byte
		copy(byteArr[:], []byte(n))
		PIDs[i] = byteArr
	}

	otherLeftKeys := util.ComputeAllLeftKeys(len(s.config.Names), s.config.Index, s.crypto.keyLeft, s.crypto.xs, PIDs)
	s.crypto.clusterSessionKey = computeSharedSecret(otherLeftKeys, PIDs, len(s.config.Names))
	util.LogCrypto(fmt.Sprintf("Cluster Session Key established: %02x...", s.crypto.clusterSessionKey[:4]))

	s.transportMainSessionKey()
}

func (s *Session) decryptAndStoreKey(content []byte) {
	mainSessionKey, err := util.DecryptAndCheckHMAC(content, s.crypto.clusterSessionKey)
	if err != nil {
		util.LogError(fmt.Sprintln("Failed decrypting Encrypted Main Session Key message:", err))
		return
	}
	copy(s.mainSessionKey[:], mainSessionKey)
	util.LogCrypto(fmt.Sprintf("Main Session Key established: %02x", s.mainSessionKey[:4]))
}

// Recalculate the commitments and compare them to the received ones.
// If they do not match, it is an error and the protocol stops.
func checkCommitments(xs [][gake.SsLen]byte, publicKeys [][gake.PkLen]byte, coins [][gake.CoinLen]byte, commitments []gake.Commitment) bool {
	for i, publicKey := range publicKeys {
		var xiBuf [gake.SsLen + 4]byte
		var iBuf [4]byte

		iBuf[0] = byte(i >> 24)
		iBuf[1] = byte(i >> 16)
		iBuf[2] = byte(i >> 8)
		iBuf[3] = byte(i)

		copy(xiBuf[:], xs[i][:])
		copy(xiBuf[gake.SsLen:], iBuf[:])

		commitment := gake.Commit_pke(publicKey, xiBuf, coins[i])

		for j := range gake.CtKemLen {
			if commitment.CipherTextKem[j] != commitments[i].CipherTextKem[j] {
				return false
			}
		}

		for j := range gake.CtDemLen {
			if commitment.CipherTextDem[j] != commitments[i].CipherTextDem[j] {
				return false
			}
		}

		for j := range gake.TagLen {
			if commitment.Tag[j] != commitments[i].Tag[j] {
				return false
			}
		}
	}

	return true
}

// We define the master key as the concatenation of all the numParties left keys, together with party identifiers.
// Then, we hash the master key with SHA3-512 to obtain the 64 byte shared secret.
// NOTE: we do not compute the Session ID (sid), since we do not use it.
func computeSharedSecret(otherLeftKeys [][32]byte, pids [][20]byte, numParties int) [2 * gake.SsLen]byte {
	masterKey := make([]byte, (gake.SsLen+gake.PidLen)*numParties)

	for i, key := range otherLeftKeys {
		copy(masterKey[i*gake.SsLen:(i+1)*gake.SsLen], key[:])
	}

	for i, pid := range pids {
		copy(masterKey[len(otherLeftKeys)*gake.SsLen+i*gake.PidLen:len(otherLeftKeys)*gake.SsLen+(i+1)*gake.PidLen], pid[:])
	}

	return gake.Sha3_512(masterKey)
}
