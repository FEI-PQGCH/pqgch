package cluster_protocol

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"pqgch/gake"
	"pqgch/util"
)

// CryptoSession contains the cryptographic data used for computing the main session key.

type CryptoSession struct {
	TkRight      []byte               // 2-AKE temporary material.
	EskaRight    []byte               // 2-AKE temporary material.
	KeyLeft      [gake.SsLen]byte     // Shared secret with the left neighbor.
	KeyRight     [gake.SsLen]byte     // Shared secret with the right neighbor.
	Xs           [][gake.SsLen]byte   // Xs - each Xi is the result of XOR-ing the left and right key of each protocol participant.
	Commitments  []gake.Commitment    // The commitment is a result of hashing the Xi and Ri together. They are then broadcasted by each participant.
	Rs           [][gake.CoinLen]byte // Rs - each Ri is randomly generated by each participant.
	SharedSecret [gake.SsLen * 2]byte // The resulting cluster session key used for intra-cluster communication.
	OnSharedKey  func()               // Callback function to be called on main session key establishment.
	// If the session user is a cluster member, the callback tries to decrypt the main session key ciphertext.
	// This ciphertext is to be received from the cluster leader.
	// If the session user is a cluster leader, the cluster leader uses the freshly established cluster session key
	// to encrypt and distribute the earlier-established main session key. The main session key is created by the leader_protocol.
}

func NewCryptoSession(config util.ClusterConfig) CryptoSession {
	return CryptoSession{
		Xs:          make([][gake.SsLen]byte, len(config.Names)),
		OnSharedKey: func() {},
		Commitments: make([]gake.Commitment, len(config.Names)),
		Rs:          make([][gake.CoinLen]byte, len(config.Names)),
	}
}

// Session contains the selected transport for distributing the messages, config and cryptographic session state.
// We also store the reference to the keyCiphertext, which should contain the main session key. We store it so we
// are able to decrypt it even in the case of receiving keyCiphertext before we establish the cluster session key.
// mainSessionKey contains the key used for encrypted text communication.
// Received is a channel for sending decrypted text messages to client code.
type Session struct {
	transport      util.Transport
	config         util.ClusterConfig
	session        CryptoSession
	keyCiphertext  []byte
	mainSessionKey *[32]byte
	Received       chan util.Message
}

// Create a new Cluster Member session. The Transport defines how the messages produced by the protocol will be routed.
func NewSession(transport util.Transport, config util.ClusterConfig) *Session {
	s := &Session{
		transport:      transport,
		session:        NewCryptoSession(config),
		config:         config,
		Received:       make(chan util.Message, 10),
		mainSessionKey: &[32]byte{},
	}

	s.session.OnSharedKey = func() {
		if s.keyCiphertext == nil {
			util.PrintLine("[CRYPTO] No key ciphertext, skipping")
			return
		}
		recoveredKey, err := util.DecryptAndCheckHMAC(s.keyCiphertext, s.session.SharedSecret)

		if err != nil {
			util.PrintLine(fmt.Sprintf("[ERROR] Failed decrypting key message: %v\n", err))
			return
		}

		copy(s.mainSessionKey[:], recoveredKey)
		util.PrintLine(fmt.Sprintf("[CRYPTO] Main Session Key established: %02x\n", s.mainSessionKey[:4]))
	}

	transport.SetMessageHandler(s.handleMessage)

	return s
}

// Create a new Cluster Leader session. This is the session used for interacting with cluster members.
// The Transport defines how the messages produced by the protocol will be routed.
// keyRef is a reference to the main session key. We encrypt this key in the OnSharedKey handler.
// It is assumed to already be established by the time we establish the cluster session key.
func NewLeaderSession(transport util.Transport, config util.ClusterConfig, keyRef *[32]byte) *Session {
	s := &Session{
		transport: transport,
		session:   NewCryptoSession(config),
		config:    config,
		Received:  make(chan util.Message, 10),
	}

	s.session.OnSharedKey = func() {
		util.PrintLine("[CRYPTO] Broadcasting Main Session Key to cluster")
		keyMsg := util.EncryptAndHMAC(*keyRef, config.GetName(), s.session.SharedSecret)
		s.transport.Send(keyMsg)
	}

	transport.SetMessageHandler(s.handleMessage)
	s.mainSessionKey = keyRef

	return s
}

// Initialize the session by sending the first message of the 2-AKE to the neighbor.
func (s *Session) Init() {
	var rightIndex = (s.config.Index + 1) % len(s.config.Names)
	var akeSendARight []byte
	akeSendARight, s.session.TkRight, s.session.EskaRight = gake.KexAkeInitA(s.config.GetPublicKeys()[rightIndex])

	msg := util.Message{
		ID:         util.UniqueID(),
		SenderID:   s.config.Index,
		SenderName: s.config.GetName(),
		Type:       s.config.GetMessageType(util.AkeAMsg),
		ReceiverID: rightIndex,
		Content:    base64.StdEncoding.EncodeToString(akeSendARight),
	}

	s.transport.Send(msg)
}

// Process the first message of 2-AKE, holding as a result keyLeft. The second message of 2-AKE is then sent.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) akeA(akeB util.Message) {
	akeSendA, _ := base64.StdEncoding.DecodeString(akeB.Content)

	var akeSendB []byte
	akeSendB, s.session.KeyLeft = gake.KexAkeSharedB(
		akeSendA,
		s.config.GetSecretKey(),
		s.config.GetPublicKeys()[akeB.SenderID])

	util.PrintLine("[CRYPTO] Established 2-AKE shared key with left neighbor")

	akeB = util.Message{
		ID:         util.UniqueID(),
		SenderID:   s.config.Index,
		SenderName: s.config.GetName(),
		Type:       s.config.GetMessageType(util.AkeBMsg),
		ReceiverID: akeB.SenderID,
		Content:    base64.StdEncoding.EncodeToString(akeSendB),
	}

	xi := checkLeftRightKeys(&s.session, s.config)
	s.transport.Send(akeB)
	if !xi.IsEmpty() {
		s.transport.Send(xi)
	}
}

// Process the second message of 2-AKE, holding as a result keyRight.
// If we have both keyLeft and keyRight available at this point, the Xi value is calculated and broadcasted.
func (s *Session) akeB(msg util.Message) {
	akeSendB, _ := base64.StdEncoding.DecodeString(msg.Content)
	s.session.KeyRight = gake.KexAkeSharedA(akeSendB, s.session.TkRight, s.session.EskaRight, s.config.GetSecretKey())

	util.PrintLine("[CRYPTO] Established 2-AKE shared key with right neighbor")

	xi := checkLeftRightKeys(&s.session, s.config)

	if !xi.IsEmpty() {
		s.transport.Send(xi)
	}
}

// Handle the message containing Xi, Ri and Commitment. This message is broadcasted by the other protocol participants to everyone else.
// If we receive such a message, we need to try finalizing the protocol, as we could have received the last message of this kind we need.
func (s *Session) xiRiCommitment(msg util.Message) {
	if msg.SenderID == s.config.Index {
		return
	}

	decoded, _ := base64.StdEncoding.DecodeString(msg.Content)

	xi := decoded[:gake.SsLen]
	kem := decoded[gake.SsLen : gake.SsLen+gake.CtKemLen]
	dem := decoded[gake.SsLen+gake.CtKemLen : gake.SsLen+gake.CtKemLen+gake.CtDemLen]
	tag := decoded[gake.SsLen+gake.CtKemLen+gake.CtDemLen : gake.SsLen+gake.CtKemLen+gake.CtDemLen+gake.TagLen]
	coin := decoded[gake.SsLen+gake.CtKemLen+gake.CtDemLen+gake.TagLen:]

	var xiArr [gake.SsLen]byte
	copy(xiArr[:], xi)
	var kemArr [gake.CtKemLen]byte
	copy(kemArr[:], kem)
	var demArr [gake.CtDemLen]byte
	copy(demArr[:], dem)
	var tagArr [gake.TagLen]byte
	copy(tagArr[:], tag)
	var coinArr [gake.CoinLen]byte
	copy(coinArr[:], coin)

	var commitment gake.Commitment
	commitment.CipherTextDem = demArr
	commitment.CipherTextKem = kemArr
	commitment.Tag = tagArr

	s.session.Commitments[msg.SenderID] = commitment
	s.session.Rs[msg.SenderID] = coinArr
	s.session.Xs[msg.SenderID] = xiArr
	tryFinalizeProtocol(&s.session, s.config)
}

// Handle the key cipher text message, which should contain the main session key.
// If we have the cluster session key available, we decrypt the ciphertext and store the main session key.
// If it is not available yet, we store the key ciphertext and we will decrypt it in the OnSharedKey handler.
func (s *Session) keyHandler(msg util.Message) {
	decodedContent, err := base64.StdEncoding.DecodeString(msg.Content)
	if err != nil {
		util.PrintLine(fmt.Sprintf("[ERROR] Failed to decode key message: %v\n", err))
		return
	}
	if s.session.SharedSecret == [gake.SsLen * 2]byte{} {
		util.PrintLine(fmt.Sprintln("[CRYPTO] No cluster sesssion key yet. Storing key ciphertext message."))
		s.keyCiphertext = decodedContent
		return
	}
	mainSessionKey, err := util.DecryptAndCheckHMAC(decodedContent, s.session.SharedSecret)
	if err != nil {
		util.PrintLine(fmt.Sprintln("[ERROR] Failed decrypting key ciphertext message:", err))
		return
	}
	copy(s.mainSessionKey[:], mainSessionKey)
	util.PrintLine(fmt.Sprintf("[CRYPTO] Main Session Key established: %02x\n", s.mainSessionKey[:4]))
}

// Handle a text message - we decrypt it using the main session key and send it to the Received channel.
func (s *Session) text(msg util.Message) {
	if *s.mainSessionKey == [gake.SsLen]byte{} {
		util.PrintLine("[INFO] No Main Session Key yet. Skipping message.")
		return
	}
	plainText, err := util.DecryptAesGcm(msg.Content, s.mainSessionKey[:])
	if err != nil {
		util.PrintLine(fmt.Sprint("[ERROR] Failed decrypting message:", err))
		return
	}
	text := fmt.Sprintf("%s: %s", msg.SenderName, plainText)
	util.PrintLineColored(text, util.ColorGreen)
}

// Handle the received message according to its type.
func (s *Session) handleMessage(msg util.Message) {
	switch msg.Type {
	case util.AkeAMsg:
		s.akeA(msg)
	case util.AkeBMsg:
		s.akeB(msg)
	case util.XiRiCommitmentMsg:
		s.xiRiCommitment(msg)
	case util.KeyMsg:
		s.keyHandler(msg)
	default:
		s.text(msg)
	}
}

// Encrypt and send the text message. To be used by client code.
func (s *Session) SendText(text string) {
	if [32]byte(*s.mainSessionKey) == [32]byte{} {
		util.PrintLine("[CRYPTO] No Main Session Key yet. Not sending message.")
		return
	}
	cipherText, err := util.EncryptAesGcm(text, s.mainSessionKey[:])
	if err != nil {
		util.PrintLine(fmt.Sprintf("[ERROR] Encryption failed: %v\n", err))
		return
	}
	msg := util.Message{
		ID:         util.UniqueID(),
		SenderID:   s.config.Index,
		SenderName: s.config.GetName(),
		Content:    cipherText,
		Type:       util.TextMsg,
		ClusterID:  s.config.Index,
	}
	s.transport.Send(msg)
}

// Check whether we have both keyLeft and keyRight available. If so, compute the Xi, Ri and Commitment message and return it.
// Also, try finalizing the protocol now, since the Xi we computed could have been the last one we needed.
func checkLeftRightKeys(session *CryptoSession, config util.ClusterConfig) util.Message {
	if session.KeyRight != [gake.SsLen]byte{} && session.KeyLeft != [gake.SsLen]byte{} {
		util.PrintLine("[CRYPTO] Established 2-AKE shared keys with both neighbors")
		xcmMsg := getXiCommitmentCoinMsg(session, config)
		tryFinalizeProtocol(session, config)
		return xcmMsg
	}

	return util.Message{}
}

// Computation of the Xi, Ri and Commitment message.
// We XOR together our keyLeft and keyRight.
// Generate a random Ri.
// Compute the commitment as a public key encryption of Xi, Ri and i (index of current party).
// Save the values for our use and also return a message containing them, so we can send it to other protocol participants.
func getXiCommitmentCoinMsg(session *CryptoSession, config util.ClusterConfig) util.Message {
	xi := gake.XorKeys(session.KeyRight, session.KeyLeft)
	ri := gake.GetRi()

	commitment := computeCommitment(
		config.Index,
		config.GetPublicKeys()[config.Index],
		xi,
		ri)

	session.Xs[config.Index] = xi
	session.Commitments[config.Index] = commitment
	session.Rs[config.Index] = ri

	var buffer bytes.Buffer
	buffer.Grow(gake.SsLen + gake.CtKemLen + gake.CtDemLen + gake.TagLen + gake.CoinLen)
	buffer.Write(xi[:])
	buffer.Write(commitment.CipherTextKem[:])
	buffer.Write(commitment.CipherTextDem[:])
	buffer.Write(commitment.Tag[:])
	buffer.Write(ri[:])

	msg := util.Message{
		ID:         util.UniqueID(),
		SenderID:   config.Index,
		SenderName: config.GetName(),
		Type:       config.GetMessageType(util.XiRiCommitmentMsg),
		Content:    base64.StdEncoding.EncodeToString(buffer.Bytes()),
	}

	return msg
}

// Compute the commitment as Kyber Public Key Encryption of Xi, Ri and i.
func computeCommitment(
	i int,
	public_key [gake.PkLen]byte,
	xi [32]byte,
	ri [44]byte) gake.Commitment {
	var xi_i [36]byte
	var buf_int [4]byte

	buf_int[0] = byte(i >> 24)
	buf_int[1] = byte(i >> 16)
	buf_int[2] = byte(i >> 8)
	buf_int[3] = byte(i)

	copy(xi_i[:], xi[:])
	copy(xi_i[32:], buf_int[:])

	commitment := gake.Commit_pke(public_key, xi_i, ri)

	return commitment
}

// First, we check whether we have received all of the Xs.
// Then, we check whether XOR-ing the Xs together gives use the zero byte array.
// Then, we check the commitments by recalculating them.
// Then, we construct the party identifiers (PIDs) array.
// Finally we compute the shared secret key and session ID. We save it for later use - distribution of the main session key.
// The cluster leader uses this session key to encrypt the main session key, cluster members use it for decrypting said key.
func tryFinalizeProtocol(session *CryptoSession, config util.ClusterConfig) {
	for i := range session.Xs {
		if (session.Xs)[i] == [gake.SsLen]byte{} {
			return
		}
	}

	util.PrintLine("[CRYPTO] Received all Xs")

	ok := util.CheckXs(session.Xs, len(config.Names))
	if ok {
		util.PrintLine("[CRYPTO] Xs check: success")
	} else {
		util.FatalError("Failed XS check")
	}

	ok = checkCommitments(len(config.Names), session.Xs, config.GetPublicKeys(), session.Rs, session.Commitments)
	if ok {
		util.PrintLine("[CRYPTO] Commitments check: success")
	} else {
		util.FatalError("Failed Commitments check")
	}

	for i := range session.Xs {
		util.PrintLine(fmt.Sprintf("[CRYPTO] X%d: %02x\n", i, (session.Xs)[i][:4]))
	}

	PIDs := make([][gake.PidLen]byte, len(config.Names))
	stringPIDs := config.Names
	for i := range config.Names {
		var byteArr [gake.PidLen]byte
		copy(byteArr[:], []byte(stringPIDs[i]))
		PIDs[i] = byteArr
	}

	otherLeftKeys := util.ComputeAllLeftKeys(len(config.Names), config.Index, session.KeyLeft, session.Xs, PIDs)
	sharedSecret := computeSharedSecret(otherLeftKeys, PIDs, len(config.Names))

	util.PrintLine(fmt.Sprintf("[CRYPTO] Cluster Shared Secret established: %02x...\n", sharedSecret[:4]))

	session.SharedSecret = sharedSecret
	session.OnSharedKey()
}

// Recalculate the commitments and compare them to the received ones.
// If they do not match, it is an error and the protocol stops.
func checkCommitments(
	numParties int,
	xs [][32]byte,
	public_keys [][gake.PkLen]byte,
	coins [][44]byte,
	commitments []gake.Commitment) bool {
	for i := range numParties {
		var xi_i [36]byte
		var buf_int [4]byte

		buf_int[0] = byte(i >> 24)
		buf_int[1] = byte(i >> 16)
		buf_int[2] = byte(i >> 8)
		buf_int[3] = byte(i)

		copy(xi_i[:32], xs[i][:])
		copy(xi_i[32:], buf_int[:])

		commitment := gake.Commit_pke(public_keys[i], xi_i, coins[i])

		for j := range gake.CtKemLen {
			if commitment.CipherTextKem[j] != commitments[i].CipherTextKem[j] {
				return false
			}
		}

		for j := range 36 {
			if commitment.CipherTextDem[j] != commitments[i].CipherTextDem[j] {
				return false
			}
		}

		for j := range 16 {
			if commitment.Tag[j] != commitments[i].Tag[j] {
				return false
			}
		}
	}

	return true
}

// We define the master key as the concatenation of all the numParties left keys, together with party identifiers.
// Then, we hash the master key with SHA3-512 to obtain the 64 byte shared secret.
// NOTE: we do not compute the Session ID (sid), since we do not use it.
func computeSharedSecret(otherLeftKeys [][32]byte, pids [][20]byte, numParties int) [gake.SsLen * 2]byte {
	masterKey := make([]byte, 52*numParties)

	for i := range otherLeftKeys {
		copy(masterKey[i*32:(i+1)*32], otherLeftKeys[i][:])
	}

	for i := range pids {
		copy(masterKey[len(otherLeftKeys)*32+i*20:len(otherLeftKeys)*32+(i+1)*20], pids[i][:])
	}

	return gake.Sha3_512(masterKey)
}
